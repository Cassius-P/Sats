<html>
<head>
    <meta charSet="utf-8"/>
    <meta
            name="viewport"
            content="initial-scale=1,maximum-scale=1,user-scalable=no"
    />
    <title>
        Satellites in 3D view | Sample | ArcGIS API for JavaScript 4.24
    </title>

    <style>
        html,
        body,
        #viewDiv {
            padding: 0;
            margin: 0;
            height: 100%;
            width: 100%;
        }
    </style>

    <link
            rel="stylesheet"
            href="https://js.arcgis.com/4.24/esri/themes/light/main.css"
    />
    <script src="https://js.arcgis.com/4.24/"></script>
    <script src="https://developers.arcgis.com/javascript/latest/sample-code/satellites-3d/live/satellite.js"></script>
    <script src="https://cdn.tailwindcss.com"></script>
    <script
            src="https://code.jquery.com/jquery-3.6.1.min.js"
            integrity="sha256-o88AwQnZB+VDvE9tvIXrMQaPlFFSUTR+nldQm1LuPXQ="
            crossorigin="anonymous"></script>
    <script>
        require([
            "esri/Map",
            "esri/views/SceneView",
            "esri/layers/GraphicsLayer",
            "esri/Graphic",
            "esri/request"
        ], (Map, SceneView, GraphicsLayer, Graphic, esriRequest) => {
            const map = new Map({
                basemap: "satellite"
            });

            const view = new SceneView({
                container: "viewDiv",
                map: map,
                constraints: {
                    altitude: {
                        max: 12000000000000 // meters
                    }
                },
                // force the popup to the docked position
                // for each selected feature
                popup: {
                    dockEnabled: true,
                    dockOptions: {
                        breakpoint: false
                    }
                },
                environment: {
                    lighting: {
                        type: "virtual"
                    }
                }
            });

            view.popup.watch("selectedFeature", () => {
                satelliteTracks.removeAll();
            });

            view.popup.on("trigger-action", (event) => {
                if (event.action.id === "track") {
                    satelliteTracks.removeAll();

                    let graphic = view.popup.selectedFeature;
                    let trackFeatures = [];

                    for (let i = 0; i < 60 * 24; i++) {
                        let loc = null;
                        try {
                            loc = getSatelliteLocation(
                                    new Date(graphic.attributes.time + i * 1000 * 60),
                                    graphic.attributes.line1,
                                    graphic.attributes.line2
                            );
                        } catch (error) {
                        }

                        if (loc !== null) {
                            trackFeatures.push([loc.x, loc.y, loc.z]);
                        }
                    }

                    let track = new Graphic({
                        geometry: {
                            type: "polyline", // autocasts as new Polyline()
                            paths: [trackFeatures]
                        },
                        symbol: {
                            type: "line-3d", // autocasts as new LineSymbol3D()
                            symbolLayers: [
                                {
                                    type: "line", // autocasts as new LineSymbol3DLayer()
                                    material: {
                                        color: [192, 192, 192, 0.5]
                                    },
                                    size: 1
                                }
                            ]
                        }
                    });

                    satelliteTracks.add(track);
                }
            });

            const satelliteLayer = new GraphicsLayer();
            const satelliteTracks = new GraphicsLayer();

            map.addMany([satelliteLayer, satelliteTracks]);

            //Options = query Params in JSON
            function getSats(options){
                let opt = ""
                for (let key in options){
                    let value = options[key];
                    opt+= "&"+key+"="+value
                }

                let url = "https://aviation-edge.com/v2/public/satelliteDetails?key=b73107-fd522e&limit=30000000"+opt
                $.ajax({
                    method: "GET",
                    url: url
                }).done(function( msg ) {
                    console.log(msg)
                    displaySats(msg)
                });
            }

            function displaySats(arr){
                let len = arr.length
                for (let i = 0; i < len; i++) {
                    console.log(i, "/", arr.length)
                    let sat = arr[i];
                    let type = sat.type
                    if(type.toLowerCase() !== "payload"){
                        continue;
                    }
                    let commonName = sat.name
                    let line1 = sat.tle1
                    let line2 = sat.tle2
                    let time = Date.now();
                    let country = sat.country

                    if(country.toLowerCase() === "cis"){

                    }

                    const launchYear = Number(sat.launchYear)
                    const launchNum = Number(sat.launchNum);
                    const noradId = Number(line1.substring(3, 7));
                    let satelliteLoc = null;

                    try {
                        satelliteLoc = getSatelliteLocation(new Date(time), line1, line2);
                    } catch (error) {
                    }

                    if (satelliteLoc !== null) {
                        let template = {
                            title: "{name}",
                            content: "Lancement num {number} de {year}, depuis {country}",
                            actions: [
                                {
                                    // Create a popup action to display the satellite track.
                                    title: "Show Satellite Track",
                                    id: "track",
                                    className: "esri-icon-globe"
                                }
                            ]
                        };
                        setNb(country)
                        let color = getColor(country).color
                        country = getColor(country).country

                        let graphic = new Graphic({
                            geometry: satelliteLoc,
                            symbol: {
                                type: "point-3d",  // autocasts as new PointSymbol3D()
                                symbolLayers: [{
                                    type: "object",  // autocasts as new ObjectSymbol3DLayer()
                                    width: 150000,    // diameter of the object from east to west in meters
                                    height: 10,  // height of object in meters
                                    depth: 150000,   // diameter of the object from north to south in meters
                                    resource: {primitive: "cone"},
                                    material: {color}
                                }]
                            },
                            attributes: {
                                name: commonName,
                                year: launchYear,
                                id: noradId,
                                number: launchNum,
                                country,
                                time: time,
                                line1: line1,
                                line2: line2
                            },
                            popupTemplate: template
                        });

                        satelliteLayer.add(graphic);
                    }
                }
            }

            getSats()

            function getColor(country){
                let colors = {
                    "us": {
                        color:'#1f77b4',
                        country:"Etats-Unis"
                    },
                    "esa": {
                        color:'#82DEFA',
                        country:"Europe"
                    },
                    "prc": {
                        color:'#ff7f0e',
                        country:"Chine"
                    },
                    "uk": {
                        color:'#9467bd',
                        country:"Royaume-Uni"
                    },
                    "ind": {
                        color:'#c5b0d5',
                        country:"Inde"
                    },
                    "jpn": {
                        color:'#c7c7c7',
                        country:"Japon"
                    },
                    "cis": {
                        color:'#d62728',
                        country:"Russie / URSS"
                    },
                    "other": {
                        color:'#ffbb78',
                        country:"Divers"
                    }
                }

                if(colors.hasOwnProperty(country.toLowerCase())){
                    return colors[country.toLowerCase()]
                }else{
                    return colors.other
                }
            }
            function getSatelliteLocation(date, line1, line2) {

                const satrec = satellite.twoline2satrec(line1, line2);
                const position_and_velocity = satellite.propagate(
                        satrec,
                        date.getUTCFullYear(),
                        date.getUTCMonth() + 1,
                        date.getUTCDate(),
                        date.getUTCHours(),
                        date.getUTCMinutes(),
                        date.getUTCSeconds()
                );
                const position_eci = position_and_velocity.position;

                const gmst = satellite.gstime_from_date(
                        date.getUTCFullYear(),
                        date.getUTCMonth() + 1,
                        date.getUTCDate(),
                        date.getUTCHours(),
                        date.getUTCMinutes(),
                        date.getUTCSeconds()
                );

                const position_gd = satellite.eci_to_geodetic(position_eci, gmst);

                let longitude = position_gd.longitude;
                let latitude = position_gd.latitude;
                let height = position_gd.height;
                if (isNaN(longitude) || isNaN(latitude) || isNaN(height)) {
                    return null;
                }
                const rad2deg = 180 / Math.PI;
                while (longitude < -Math.PI) {
                    longitude += 2 * Math.PI;
                }
                while (longitude > Math.PI) {
                    longitude -= 2 * Math.PI;
                }
                return {
                    type: "point", // Autocasts as new Point()
                    x: rad2deg * longitude,
                    y: rad2deg * latitude,
                    z: height * 1000
                };
            }

            function setNb(country){
                let c = getColor(country).country
                if(c.toLowerCase() === "divers"){
                    country = "other"
                }
                let sel = '[data-ct="'+country.toLowerCase()+'"]'
                let nb = $(sel).find('b')

                let value = parseInt(nb.text())

                nb.text(value+1)


                let total = '[data-ct="total"]'
                let nbT = $(total).find('b')
                let valueT = parseInt(nbT.text())
                nbT.text(valueT+1)

            }
        });



    </script>

</head>



<body class="relative">
{{{body}}}

<div class="w-fit px-2 py-1 absolute bottom-16 left-16 rounded-md shadow-md bg-white flex flex-col">
    <div class="flex py-1" data-ct="us">
        <span class="rounded-full w-5 h-5 mr-4" style="background-color:#1f77b4" ></span>
        Etats-Unis
        <b class="ml-3">0</b>
    </div>
    <div class="flex py-1" data-ct="cis">
        <span class="rounded-full w-5 h-5 mr-4" style="background-color:#c5b0d5" ></span>
        Russie
        <b class="ml-3">0</b>
    </div>
    <div class="flex py-1" data-ct="prc">
        <span class="rounded-full w-5 h-5 mr-4" style="background-color:#ff7f0e" ></span>
        Chine
        <b class="ml-3">0</b>
    </div>
    <div class="flex py-1" data-ct="esa">
        <span class="rounded-full w-5 h-5 mr-4" style="background-color:#82DEFA" ></span>
        Europe
        <b class="ml-3">0</b>
    </div>
    <div class="flex py-1" data-ct="ind">
        <span class="rounded-full w-5 h-5 mr-4" style="background-color:#d62728" ></span>
        Inde
        <b class="ml-3">0</b>
    </div>
    <div class="flex py-1" data-ct="jpn">
        <span class="rounded-full w-5 h-5 mr-4" style="background-color:#c7c7c7" ></span>
        Japon
        <b class="ml-3">0</b>
    </div>
    <div class="flex py-1" data-ct="uk">
        <span class="rounded-full w-5 h-5 mr-4" style="background-color:#9467bd" ></span>
        Royaume-Uni
        <b class="ml-3">0</b>
    </div>
    <div class="flex py-1" data-ct="other">
        <span class="rounded-full w-5 h-5 mr-4" style="background-color:#ffbb78" ></span>
        Divers
        <b class="ml-3">0</b>
    </div>

    <div class="flex py-1" data-ct="total">
        Total
        <b class="ml-3">0</b>
    </div>
</div>
</body>
</html>
